{"version":3,"sources":["components/Order/Order.js","containers/Orders/Orders.js","components/Order/Order.module.css"],"names":["order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","style","textTransform","display","margin","border","padding","key","className","classes","Order","Number","parseFloat","price","toFixed","Orders","state","orders","loading","this","onFetchOrders","token","userId","Spinner","id","Component","connect","auth","dispatch","actions","withErrorHandler","axios","module","exports"],"mappings":"8LAoCeA,EAhCD,SAAEC,GACZ,IAAMC,EAAc,GAEpB,IAAM,IAAIC,KAAkBF,EAAMC,YAC9BA,EAAYE,KACR,CACIC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAKtC,IAAMI,EAAmBL,EAAYM,KAAI,SAAAC,GACrC,OAAO,0BACHC,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,OAEbC,IAAKP,EAAGJ,MAAOI,EAAGJ,KARf,KAQuBI,EAAGH,OAR1B,QAWX,OACI,yBAAKW,UAAWC,IAAQC,OACpB,2CAAiBZ,GACjB,qCAAU,uCAAaa,OAAOC,WAAYpB,EAAMqB,OAAQC,QAAS,O,gCCvBvEC,E,4MACFC,MAAQ,CACJC,OAAQ,GACRC,SAAS,G,kEAITC,KAAK3B,MAAM4B,cAAcD,KAAK3B,MAAM6B,MAAOF,KAAK3B,MAAM8B,U,+BAItD,IAAIL,EAAS,kBAACM,EAAA,EAAD,MAUb,OATKJ,KAAK3B,MAAM0B,UACZD,EAASE,KAAK3B,MAAMyB,OAAOlB,KAAI,SAAAR,GAAK,OAChC,kBAACmB,EAAD,CACIH,IAAKhB,EAAMiC,GACX/B,YAAaF,EAAME,YACnBoB,MAAOtB,EAAMsB,YAKrB,6BACKI,O,GAvBIQ,aA4CNC,uBAfS,SAAAV,GACpB,MAAO,CACHC,OAAQD,EAAMzB,MAAM0B,OACpBC,QAASF,EAAMzB,MAAM2B,QACrBG,MAAOL,EAAMW,KAAKN,MAClBC,OAAQN,EAAMW,KAAKL,WAIA,SAAAM,GACvB,MAAO,CACHR,cAAe,SAACC,EAAOC,GAAR,OAAmBM,EAASC,IAAoBR,EAAOC,QAI/DI,CAA6CI,YAAiBf,EAAQgB,O,mBCnDrFC,EAAOC,QAAU,CAAC,MAAQ","file":"static/js/5.6be63642.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './Order.module.css';\r\n\r\nconst order = ( props ) => {\r\n    const ingredients = [];\r\n\r\n    for ( let ingredientName in props.ingredients ) {\r\n        ingredients.push(\r\n            {\r\n                name: ingredientName,\r\n                amount: props.ingredients[ingredientName]\r\n            }\r\n        );\r\n    }\r\n\r\n    const ingredientOutput = ingredients.map(ig => {\r\n        return <span \r\n            style={{\r\n                textTransform: 'capitalize',\r\n                display: 'inline-block',\r\n                margin: '0 8px',\r\n                border: '1px solid #ccc',\r\n                padding: '5px'\r\n                }}\r\n            key={ig.name}>{ig.name} ({ig.amount})</span>;\r\n    });\r\n\r\n    return (\r\n        <div className={classes.Order}>\r\n            <p>Ingredients: {ingredientOutput}</p>\r\n            <p>Price: <strong>USD {Number.parseFloat( props.price ).toFixed( 2 )}</strong></p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default order;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Order from '../../components/Order/Order';\r\nimport axios from '../../axios-orders';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nclass Orders extends Component {\r\n    state = {\r\n        orders: [],\r\n        loading: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onFetchOrders(this.props.token, this.props.userId);\r\n    }\r\n\r\n    render() {\r\n        let orders = <Spinner />;\r\n        if (!this.props.loading) {\r\n            orders = this.props.orders.map(order => (\r\n                <Order\r\n                    key={order.id}\r\n                    ingredients={order.ingredients}\r\n                    price={order.price} />\r\n            ))\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                {orders}\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        orders: state.order.orders,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\r\n\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__RdD6V\"};"],"sourceRoot":""}